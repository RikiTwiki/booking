{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n// Импорт createRouter и createWebHistory из vue-router\nimport { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../components/AppHome.vue';\nimport Login from '../components/UserLogin.vue';\nimport Register from '../components/UserRegister.vue'; // Импорт нового компонента\n\nimport AddRoomPage from '../components/AddRoomPage.vue';\nimport BookingPage from '../components/BookingPage.vue';\nimport Users from '../components/UsersPage.vue';\n\n// Создание экземпляра роутера с использованием функции createRouter\nconst router = createRouter({\n  history: createWebHistory(),\n  // Используйте createWebHistory для использования истории браузера\n  routes: [{\n    path: '/',\n    name: 'home',\n    component: Home,\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/login',\n    name: 'login',\n    component: Login\n  }, {\n    path: '/register',\n    name: 'Register',\n    component: Register\n  }, {\n    path: '/add-room',\n    name: 'AddRoom',\n    component: AddRoomPage,\n    meta: {\n      requiresAuth: true,\n      requiresAdmin: true\n    }\n  }, {\n    path: '/add-booking',\n    name: 'AddBooking',\n    component: BookingPage,\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: '/users',\n    name: 'Users',\n    component: BookingPage,\n    meta: {\n      requiresAuth: true\n    }\n  }]\n});\n\n// Проверка аутентификации и роли перед переходом\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('authToken'); // Проверяем токен\n  let user = null;\n  if (token) {\n    try {\n      // Расшифровываем JWT токен\n      user = JSON.parse(atob(token.split('.')[1]));\n    } catch (error) {\n      console.error('Error decoding token:', error);\n    }\n  }\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!token) {\n      next('/login'); // Перенаправляем на страницу логина, если пользователь не авторизован\n    } else if (to.matched.some(record => record.meta.requiresAdmin)) {\n      if (user?.role === 'admin') {\n        next(); // Разрешаем доступ администратору\n      } else {\n        next('/'); // Перенаправляем на главную страницу, если пользователь не администратор\n      }\n    } else {\n      next(); // Разрешаем доступ авторизованному пользователю\n    }\n  } else {\n    next(); // Доступ открыт\n  }\n});\n\n// Экспорт роутера для использования в main.js\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","Home","Login","Register","AddRoomPage","BookingPage","Users","router","history","routes","path","name","component","meta","requiresAuth","requiresAdmin","beforeEach","to","from","next","token","localStorage","getItem","user","JSON","parse","atob","split","error","console","matched","some","record","role"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/router/index.js"],"sourcesContent":["// Импорт createRouter и createWebHistory из vue-router\nimport { createRouter, createWebHistory } from 'vue-router';\nimport Home from '../components/AppHome.vue';\nimport Login from '../components/UserLogin.vue';\n\nimport Register from '../components/UserRegister.vue';  // Импорт нового компонента\n\nimport AddRoomPage from '../components/AddRoomPage.vue';\n\nimport BookingPage from '../components/BookingPage.vue';\n\nimport Users from '../components/UsersPage.vue';\n\n// Создание экземпляра роутера с использованием функции createRouter\nconst router = createRouter({\n  history: createWebHistory(), // Используйте createWebHistory для использования истории браузера\n  routes: [\n    {\n      path: '/',\n      name: 'home',\n      component: Home,\n      meta: { requiresAuth: true }\n    },\n    {\n      path: '/login',\n      name: 'login',\n      component: Login\n    },\n    { path: '/register',\n      name: 'Register',\n      component: Register\n    },\n    { path: '/add-room',\n      name: 'AddRoom',\n      component: AddRoomPage,\n      meta: { requiresAuth: true, requiresAdmin: true }\n    },\n    {\n      path: '/add-booking',\n      name: 'AddBooking',\n      component: BookingPage,\n      meta: { requiresAuth: true },\n    },\n    {\n      path: '/users',\n      name: 'Users',\n      component: BookingPage,\n      meta: { requiresAuth: true },\n    },\n  ]\n});\n\n// Проверка аутентификации и роли перед переходом\nrouter.beforeEach((to, from, next) => {\n    const token = localStorage.getItem('authToken'); // Проверяем токен\n    let user = null;\n  \n    if (token) {\n      try {\n        // Расшифровываем JWT токен\n        user = JSON.parse(atob(token.split('.')[1]));\n      } catch (error) {\n        console.error('Error decoding token:', error);\n      }\n    }\n  \n    if (to.matched.some(record => record.meta.requiresAuth)) {\n      if (!token) {\n        next('/login'); // Перенаправляем на страницу логина, если пользователь не авторизован\n      } else if (to.matched.some(record => record.meta.requiresAdmin)) {\n        if (user?.role === 'admin') {\n          next(); // Разрешаем доступ администратору\n        } else {\n          next('/'); // Перенаправляем на главную страницу, если пользователь не администратор\n        }\n      } else {\n        next(); // Разрешаем доступ авторизованному пользователю\n      }\n    } else {\n      next(); // Доступ открыт\n    }\n  });\n\n// Экспорт роутера для использования в main.js\nexport default router;"],"mappings":";;;AAAA;AACA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,OAAOC,KAAK,MAAM,6BAA6B;AAE/C,OAAOC,QAAQ,MAAM,gCAAgC,CAAC,CAAE;;AAExD,OAAOC,WAAW,MAAM,+BAA+B;AAEvD,OAAOC,WAAW,MAAM,+BAA+B;AAEvD,OAAOC,KAAK,MAAM,6BAA6B;;AAE/C;AACA,MAAMC,MAAM,GAAGR,YAAY,CAAC;EAC1BS,OAAO,EAAER,gBAAgB,CAAC,CAAC;EAAE;EAC7BS,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,MAAM;IACZC,SAAS,EAAEX,IAAI;IACfY,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAC7B,CAAC,EACD;IACEJ,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAEV;EACb,CAAC,EACD;IAAEQ,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,UAAU;IAChBC,SAAS,EAAET;EACb,CAAC,EACD;IAAEO,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,SAAS;IACfC,SAAS,EAAER,WAAW;IACtBS,IAAI,EAAE;MAAEC,YAAY,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK;EAClD,CAAC,EACD;IACEL,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE,YAAY;IAClBC,SAAS,EAAEP,WAAW;IACtBQ,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAC7B,CAAC,EACD;IACEJ,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAEP,WAAW;IACtBQ,IAAI,EAAE;MAAEC,YAAY,EAAE;IAAK;EAC7B,CAAC;AAEL,CAAC,CAAC;;AAEF;AACAP,MAAM,CAACS,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIC,IAAI,GAAG,IAAI;EAEf,IAAIH,KAAK,EAAE;IACT,IAAI;MACF;MACAG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEA,IAAIX,EAAE,CAACa,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACnB,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD,IAAI,CAACM,KAAK,EAAE;MACVD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClB,CAAC,MAAM,IAAIF,EAAE,CAACa,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACnB,IAAI,CAACE,aAAa,CAAC,EAAE;MAC/D,IAAIQ,IAAI,EAAEU,IAAI,KAAK,OAAO,EAAE;QAC1Bd,IAAI,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,MAAM;QACLA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;MACb;IACF,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC,CAAC,CAAC;IACV;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;;AAEJ;AACA,eAAeZ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}