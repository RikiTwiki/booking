{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      rooms: [],\n      roomId: '',\n      startTime: '',\n      endTime: '',\n      reason: '',\n      message: '',\n      bookings: [],\n      page: 1,\n      // Текущая страница\n      totalPages: 1 // Количество страниц\n    };\n  },\n  async created() {\n    await this.fetchRooms();\n    await this.fetchBookings();\n  },\n  methods: {\n    async fetchRooms() {\n      try {\n        const response = await axios.get('/rooms'); // Получаем список залов\n        this.rooms = response.data;\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    },\n    async fetchBookings() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.get(`/api/bookings?page=${this.page}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.bookings = response.data;\n        this.totalPages = Math.ceil(response.data.totalCount / 10); // Пагинация\n      } catch (error) {\n        console.error('Error fetching bookings:', error.message);\n      }\n    },\n    async bookRoom() {\n      if (!this.roomId || !this.startTime || !this.endTime || !this.reason) {\n        this.message = 'Please fill in all fields before booking.';\n        return;\n      }\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.post('/add-booking', {\n          roomId: this.roomId,\n          startTime: this.startTime,\n          endTime: this.endTime,\n          reason: this.reason\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.message = `Room booked successfully! Booking ID: ${response.data.id}`;\n        this.fetchBookings(); // Обновляем список бронирований\n      } catch (error) {\n        console.error('Error booking room:', error.response?.data?.message || error.message);\n        this.message = 'Failed to book the room. Please try again.';\n      }\n    },\n    changePage(newPage) {\n      this.page = newPage;\n      this.fetchBookings(); // Загружаем данные для новой страницы\n    }\n  }\n};","map":{"version":3,"names":["axios","data","rooms","roomId","startTime","endTime","reason","message","bookings","page","totalPages","created","fetchRooms","fetchBookings","methods","response","get","error","console","token","localStorage","getItem","headers","Authorization","Math","ceil","totalCount","bookRoom","post","id","changePage","newPage"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/BookingPage.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Book a Room</h1>\n      <form @submit.prevent=\"bookRoom\">\n        <select v-model=\"roomId\" required>\n          <option disabled value=\"\">Select a Room</option>\n          <option v-for=\"room in rooms\" :key=\"room.id\" :value=\"room.id\">{{ room.name }}</option>\n        </select>\n        <input v-model=\"startTime\" type=\"datetime-local\" required />\n        <input v-model=\"endTime\" type=\"datetime-local\" required />\n        <textarea v-model=\"reason\" placeholder=\"Reason for booking\" required></textarea>\n        <button type=\"submit\">Book Room</button>\n      </form>\n      <p v-if=\"message\" class=\"message\">{{ message }}</p>\n  \n      <h2>My Bookings</h2>\n      <ul>\n        <li v-for=\"booking in bookings\" :key=\"booking.id\">\n          {{ booking.room.name }} - {{ booking.start_time }} to {{ booking.end_time }}: {{ booking.reason }}\n        </li>\n      </ul>\n  \n      <!-- Пагинация -->\n      <div v-if=\"totalPages > 1\">\n        <button @click=\"changePage(page - 1)\" :disabled=\"page === 1\">Previous</button>\n        <span>Page {{ page }} of {{ totalPages }}</span>\n        <button @click=\"changePage(page + 1)\" :disabled=\"page === totalPages\">Next</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        rooms: [],\n        roomId: '',\n        startTime: '',\n        endTime: '',\n        reason: '',\n        message: '',\n        bookings: [],\n        page: 1, // Текущая страница\n        totalPages: 1, // Количество страниц\n      };\n    },\n    async created() {\n      await this.fetchRooms();\n      await this.fetchBookings();\n    },\n    methods: {\n      async fetchRooms() {\n        try {\n          const response = await axios.get('/rooms'); // Получаем список залов\n          this.rooms = response.data;\n        } catch (error) {\n          console.error('Error fetching rooms:', error.message);\n        }\n      },\n  \n      async fetchBookings() {\n        try {\n          const token = localStorage.getItem('authToken');\n          const response = await axios.get(`/api/bookings?page=${this.page}`, {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n  \n          this.bookings = response.data;\n          this.totalPages = Math.ceil(response.data.totalCount / 10); // Пагинация\n        } catch (error) {\n          console.error('Error fetching bookings:', error.message);\n        }\n      },\n  \n      async bookRoom() {\n        if (!this.roomId || !this.startTime || !this.endTime || !this.reason) {\n          this.message = 'Please fill in all fields before booking.';\n          return;\n        }\n  \n        try {\n          const token = localStorage.getItem('authToken');\n          const response = await axios.post(\n            '/add-booking',\n            {\n              roomId: this.roomId,\n              startTime: this.startTime,\n              endTime: this.endTime,\n              reason: this.reason,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${token}`,\n              },\n            }\n          );\n  \n          this.message = `Room booked successfully! Booking ID: ${response.data.id}`;\n          this.fetchBookings(); // Обновляем список бронирований\n        } catch (error) {\n          console.error('Error booking room:', error.response?.data?.message || error.message);\n          this.message = 'Failed to book the room. Please try again.';\n        }\n      },\n  \n      changePage(newPage) {\n        this.page = newPage;\n        this.fetchBookings(); // Загружаем данные для новой страницы\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .message {\n    color: green;\n    margin-top: 10px;\n  }\n  </style>  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}