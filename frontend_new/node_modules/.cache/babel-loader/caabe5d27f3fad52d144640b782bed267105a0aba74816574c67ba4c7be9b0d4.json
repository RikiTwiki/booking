{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      name: '',\n      description: '',\n      message: '',\n      // Для сообщений об успехе или ошибке\n      isAdmin: false // Проверка роли пользователя\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        this.$router.push('/login'); // Перенаправить на страницу логина, если токена нет\n        return;\n      }\n      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Расшифровать JWT токен\n      this.isAdmin = decodedToken.role === 'admin';\n      if (!this.isAdmin) {\n        this.$router.push('/'); // Перенаправить, если пользователь не администратор\n      }\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.$router.push('/login'); // Перенаправить в случае ошибки\n    }\n  },\n  methods: {\n    async addRoom() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.post('/add-rooms', {\n          name: this.name,\n          description: this.description\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Используем ответ сервера для подтверждения\n        console.log('Room added successfully:', response.data);\n        this.message = `Room \"${response.data.name}\" added successfully!`;\n        this.name = '';\n        this.description = '';\n      } catch (error) {\n        console.error('Error adding room:', error.response?.data?.message || error.message);\n        this.message = 'Failed to add room. Please try again.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","description","message","isAdmin","created","token","localStorage","getItem","$router","push","decodedToken","JSON","parse","atob","split","role","error","console","methods","addRoom","response","post","headers","Authorization","log"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/AddRoomPage.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Add New Room</h1>\n      <form @submit.prevent=\"addRoom\" v-if=\"isAdmin\">\n        <input v-model=\"name\" type=\"text\" placeholder=\"Room Name\" required />\n        <textarea v-model=\"description\" placeholder=\"Room Description\" required></textarea>\n        <button type=\"submit\">Add Room</button>\n      </form>\n      <p v-if=\"message\" class=\"message\">{{ message }}</p>\n      <p v-else-if=\"!isAdmin\" class=\"error\">Access denied. This page is for administrators only.</p>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        name: '',\n        description: '',\n        message: '', // Для сообщений об успехе или ошибке\n        isAdmin: false, // Проверка роли пользователя\n      };\n    },\n    async created() {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n          this.$router.push('/login'); // Перенаправить на страницу логина, если токена нет\n          return;\n        }\n  \n        const decodedToken = JSON.parse(atob(token.split('.')[1])); // Расшифровать JWT токен\n        this.isAdmin = decodedToken.role === 'admin';\n  \n        if (!this.isAdmin) {\n          this.$router.push('/'); // Перенаправить, если пользователь не администратор\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        this.$router.push('/login'); // Перенаправить в случае ошибки\n      }\n    },\n    methods: {\n      async addRoom() {\n        try {\n          const token = localStorage.getItem('authToken');\n          const response = await axios.post(\n            '/add-rooms',\n            { name: this.name, description: this.description },\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n  \n          // Используем ответ сервера для подтверждения\n          console.log('Room added successfully:', response.data);\n  \n          this.message = `Room \"${response.data.name}\" added successfully!`;\n          this.name = '';\n          this.description = '';\n        } catch (error) {\n          console.error('Error adding room:', error.response?.data?.message || error.message);\n          this.message = 'Failed to add room. Please try again.';\n        }\n      },\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .message {\n    color: green;\n    margin-top: 10px;\n  }\n  .error {\n    color: red;\n    margin-top: 10px;\n  }\n  </style>  "],"mappings":";;AAcE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,OAAO,EAAE,EAAE;MAAE;MACbC,OAAO,EAAE,KAAK,CAAE;IAClB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAI,CAACF,KAAK,EAAE;QACV,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;QAC7B;MACF;MAEA,MAAMC,YAAW,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACR,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MAC5D,IAAI,CAACX,OAAM,GAAIO,YAAY,CAACK,IAAG,KAAM,OAAO;MAE5C,IAAI,CAAC,IAAI,CAACZ,OAAO,EAAE;QACjB,IAAI,CAACK,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B;IACF,EAAE,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACR,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IAC/B;EACF,CAAC;EACDS,OAAO,EAAE;IACP,MAAMC,OAAOA,CAAA,EAAG;MACd,IAAI;QACF,MAAMd,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;QAC/C,MAAMa,QAAO,GAAI,MAAMtB,KAAK,CAACuB,IAAI,CAC/B,YAAY,EACZ;UAAErB,IAAI,EAAE,IAAI,CAACA,IAAI;UAAEC,WAAW,EAAE,IAAI,CAACA;QAAY,CAAC,EAClD;UAAEqB,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUlB,KAAK;UAAG;QAAE,CAClD,CAAC;;QAED;QACAY,OAAO,CAACO,GAAG,CAAC,0BAA0B,EAAEJ,QAAQ,CAACrB,IAAI,CAAC;QAEtD,IAAI,CAACG,OAAM,GAAI,SAASkB,QAAQ,CAACrB,IAAI,CAACC,IAAI,uBAAuB;QACjE,IAAI,CAACA,IAAG,GAAI,EAAE;QACd,IAAI,CAACC,WAAU,GAAI,EAAE;MACvB,EAAE,OAAOe,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACI,QAAQ,EAAErB,IAAI,EAAEG,OAAM,IAAKc,KAAK,CAACd,OAAO,CAAC;QACnF,IAAI,CAACA,OAAM,GAAI,uCAAuC;MACxD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}