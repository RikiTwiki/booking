{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      rooms: [],\n      selectedRoom: null\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem('authToken');\n      const response = await axios.get('/bookings', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Передаем токен\n      });\n      this.rooms = response.data; // Загружаем все бронирования\n\n      console.log(\"Response data:\", response.data);\n    } catch (error) {\n      console.error('Error fetching booked rooms:', error);\n      this.$router.push('/login'); // Перенаправляем на логин при ошибке\n    }\n  },\n  methods: {\n    showRoomDetails(room) {\n      console.log(\"Selected room details:\", room);\n      this.selectedRoom = room;\n      console.log(\"Start time:\", room.start_time); // Должно показать начальное время бронирования\n      console.log(\"End time:\", room.end_time);\n    },\n    formatDate(dateString) {\n      if (!dateString) {\n        console.error(\"Invalid date string: \", dateString); // Логируем, что dateString не передан\n        return 'No date provided'; // Возвращаем сообщение, когда дата не предоставлена\n      }\n      const formattedDateString = dateString.replace(' ', 'T');\n      const date = new Date(formattedDateString);\n      if (isNaN(date.getTime())) {\n        console.error(\"Invalid date format:\", dateString);\n        return 'Invalid Date';\n      }\n      return date.toLocaleString(); // Возвращаем локализованное строковое представление даты\n    }\n  }\n};","map":{"version":3,"names":["axios","data","rooms","selectedRoom","created","token","localStorage","getItem","response","get","headers","Authorization","console","log","error","$router","push","methods","showRoomDetails","room","start_time","end_time","formatDate","dateString","formattedDateString","replace","date","Date","isNaN","getTime","toLocaleString"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/AppHome.vue"],"sourcesContent":["<template>\n    <div class=\"booked-rooms-container\">\n      <h1 class=\"header\">Booked Rooms</h1>\n      \n      <div v-if=\"rooms.length === 0\" class=\"no-rooms\">\n        No rooms are booked currently.\n      </div>\n  \n      <!-- Список комнат -->\n      <ul class=\"rooms-list\">\n        <li v-for=\"room in rooms\" :key=\"room.id\" @click=\"showRoomDetails(room)\" class=\"room-item\">\n          {{ rooms.name }}\n        </li>\n      </ul>\n  \n      <!-- Модальное окно с деталями бронирования -->\n      <div v-if=\"selectedRoom\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2 class=\"room-name\">{{ selectedRoom.name }}</h2>\n          <p><strong>Author:</strong> {{ selectedRoom.user_email || 'N/A' }}</p> <!-- Почта пользователя -->\n          <p><strong>Time:</strong> {{ formatDate(selectedRoom.start_time) }} to {{ formatDate(selectedRoom.end_time) }}</p> <!-- Время бронирования -->\n          <p><strong>Reason:</strong> {{ selectedRoom.reason }}</p> <!-- Причина -->\n          <button @click=\"selectedRoom = null\" class=\"close-btn\">Close</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        rooms: [],\n        selectedRoom: null,\n      };\n    },\n    async created() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.get('/bookings', {\n          headers: { Authorization: `Bearer ${token}` }, // Передаем токен\n        });\n        this.rooms = response.data; // Загружаем все бронирования\n\n        console.log(\"Response data:\", response.data);\n\n      } catch (error) {\n        console.error('Error fetching booked rooms:', error);\n        this.$router.push('/login'); // Перенаправляем на логин при ошибке\n      }\n    },\n    methods: {\n      showRoomDetails(room) {\n\n        console.log(\"Selected room details:\", room);\n\n        this.selectedRoom = room;\n\n        console.log(\"Start time:\", room.start_time); // Должно показать начальное время бронирования\n        console.log(\"End time:\", room.end_time);\n\n      },\n  \n      formatDate(dateString) {\n        if (!dateString) {\n            console.error(\"Invalid date string: \", dateString);  // Логируем, что dateString не передан\n            return 'No date provided';  // Возвращаем сообщение, когда дата не предоставлена\n        }\n\n        const formattedDateString = dateString.replace(' ', 'T');\n        const date = new Date(formattedDateString);\n        if (isNaN(date.getTime())) {\n            console.error(\"Invalid date format:\", dateString);\n            return 'Invalid Date';\n        }\n\n        return date.toLocaleString();  // Возвращаем локализованное строковое представление даты\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .booked-rooms-container {\n    padding: 20px;\n  }\n  \n  .header {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #4caf50;\n    margin-bottom: 20px;\n  }\n  \n  .no-rooms {\n    font-size: 1.2rem;\n    color: #555;\n  }\n  \n  .rooms-list {\n    list-style: none;\n    padding: 0;\n  }\n  \n  .room-item {\n    background-color: #f4f4f4;\n    padding: 15px;\n    margin: 10px 0;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n  \n  .room-item:hover {\n    background-color: #e0f7fa;\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .modal-content {\n    background: #fff;\n    padding: 30px;\n    border-radius: 10px;\n    width: 300px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    text-align: center;\n  }\n  \n  .room-name {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: #4caf50;\n  }\n  \n  button.close-btn {\n    margin-top: 20px;\n    padding: 10px 20px;\n    background-color: #4caf50;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  button.close-btn:hover {\n    background-color: #45a049;\n  }\n  </style>  "],"mappings":";AA6BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,MAAMC,QAAO,GAAI,MAAMR,KAAK,CAACS,GAAG,CAAC,WAAW,EAAE;QAC5CC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG,CAAC,CAAE;MACjD,CAAC,CAAC;MACF,IAAI,CAACH,KAAI,GAAIM,QAAQ,CAACP,IAAI,EAAE;;MAE5BW,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEL,QAAQ,CAACP,IAAI,CAAC;IAE9C,EAAE,OAAOa,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IAC/B;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,IAAI,EAAE;MAEpBP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,IAAI,CAAC;MAE3C,IAAI,CAAChB,YAAW,GAAIgB,IAAI;MAExBP,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEM,IAAI,CAACC,UAAU,CAAC,EAAE;MAC7CR,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEM,IAAI,CAACE,QAAQ,CAAC;IAEzC,CAAC;IAEDC,UAAUA,CAACC,UAAU,EAAE;MACrB,IAAI,CAACA,UAAU,EAAE;QACbX,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAES,UAAU,CAAC,EAAG;QACrD,OAAO,kBAAkB,EAAG;MAChC;MAEA,MAAMC,mBAAkB,GAAID,UAAU,CAACE,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;MACxD,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACH,mBAAmB,CAAC;MAC1C,IAAII,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;QACvBjB,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAES,UAAU,CAAC;QACjD,OAAO,cAAc;MACzB;MAEA,OAAOG,IAAI,CAACI,cAAc,CAAC,CAAC,EAAG;IACjC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}