{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      rooms: [],\n      selectedRoom: null\n    };\n  },\n  async mounted() {\n    const token = localStorage.getItem('authToken');\n    if (!token) {\n      this.$router.push('/login'); // Перенаправляем на логин, если токен отсутствует\n    } else {\n      try {\n        const response = await axios.get('/api/booked-rooms', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.rooms = response.data;\n      } catch (error) {\n        console.error('Error fetching booked rooms:', error);\n        localStorage.removeItem('authToken'); // Удаляем токен при ошибке\n        this.$router.push('/login'); // Перенаправляем на логин\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","rooms","selectedRoom","mounted","token","localStorage","getItem","$router","push","response","get","headers","Authorization","error","console","removeItem"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/AppHome.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Booked Rooms</h1>\n      <div v-if=\"rooms.length === 0\">No rooms are booked currently.</div>\n      <ul>\n        <li v-for=\"room in rooms\" :key=\"room.id\" @click=\"showRoomDetails(room)\">\n          {{ room.name }}\n        </li>\n      </ul>\n      <div v-if=\"selectedRoom\" class=\"modal\">\n        <h2>{{ selectedRoom.name }}</h2>\n        <p><strong>Author:</strong> {{ selectedRoom.author }}</p>\n        <p><strong>Time:</strong> {{ selectedRoom.bookingtime }}</p>\n        <p><strong>Reason:</strong> {{ selectedRoom.reason }}</p>\n        <button @click=\"selectedRoom = null\">Close</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        rooms: [],\n        selectedRoom: null,\n      };\n    },\n    async mounted() {\n        const token = localStorage.getItem('authToken');\n        if (!token) {\n            this.$router.push('/login'); // Перенаправляем на логин, если токен отсутствует\n        } else {\n            try {\n            const response = await axios.get('/api/booked-rooms', {\n                headers: { Authorization: `Bearer ${token}` },\n            });\n            this.rooms = response.data;\n            } catch (error) {\n            console.error('Error fetching booked rooms:', error);\n            localStorage.removeItem('authToken'); // Удаляем токен при ошибке\n            this.$router.push('/login'); // Перенаправляем на логин\n            }\n        }\n    }\n  };\n  </script>  "],"mappings":";AAoBE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACZ,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAI,CAACF,KAAK,EAAE;MACR,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;IACjC,OAAO;MACH,IAAI;QACJ,MAAMC,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,mBAAmB,EAAE;UAClDC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUR,KAAK;UAAG;QAChD,CAAC,CAAC;QACF,IAAI,CAACH,KAAI,GAAIQ,QAAQ,CAACT,IAAI;MAC1B,EAAE,OAAOa,KAAK,EAAE;QAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDR,YAAY,CAACU,UAAU,CAAC,WAAW,CAAC,EAAE;QACtC,IAAI,CAACR,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAC7B;IACJ;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}