{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      rooms: [],\n      roomId: '',\n      startTime: '',\n      endTime: '',\n      reason: '',\n      message: '',\n      bookings: []\n    };\n  },\n  async created() {\n    await this.fetchRooms();\n    await this.fetchBookings();\n  },\n  methods: {\n    async fetchRooms() {\n      try {\n        const response = await axios.get('/rooms');\n        this.rooms = response.data;\n      } catch (error) {\n        console.error('Error fetching rooms:', error.message);\n      }\n    },\n    async fetchBookings() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.get('http://localhost:3000/api/bookings', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.bookings = response.data;\n      } catch (error) {\n        console.error('Error fetching bookings:', error.message);\n      }\n    },\n    async bookRoom() {\n      try {\n        if (!this.roomId || !this.startTime || !this.endTime || !this.reason) {\n          this.message = 'Please fill in all fields before booking.';\n          return;\n        }\n        const token = localStorage.getItem('authToken');\n        const isAvailable = await this.checkRoomAvailability(this.roomId, this.startTime, this.endTime);\n        if (!isAvailable) {\n          this.message = 'This room is already booked for the selected time.';\n          return;\n        }\n        console.log('Sending request with token:', token);\n        const response = await axios.post('http://localhost:3000/api/book', {\n          roomId: this.roomId,\n          startTime: this.startTime,\n          end_time: this.endTime,\n          reason: this.reason\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.message = `Room booked successfully! Booking ID: ${response.data.booking.id}`;\n        this.fetchBookings(); // Обновляем список брони\n      } catch (error) {\n        console.error('Error booking room:', error.response?.data?.message || error.message);\n        this.message = 'Failed to book the room. Please try again.';\n      }\n    },\n    async checkRoomAvailability(roomId, startTime, endTime) {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.post('http://localhost:3000/api/check-availability', {\n          roomId,\n          startTime,\n          endTime\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        return response.data.isAvailable; // Предполагаем, что сервер возвращает { isAvailable: true/false }\n      } catch (error) {\n        console.error('Error checking room availability:', error.message);\n        this.message = 'Failed to check room availability. Please try again.';\n        return false; // Если произошла ошибка, считаем, что комната недоступна\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","rooms","roomId","startTime","endTime","reason","message","bookings","created","fetchRooms","fetchBookings","methods","response","get","error","console","token","localStorage","getItem","headers","Authorization","bookRoom","isAvailable","checkRoomAvailability","log","post","end_time","booking","id"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/BookingPage.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Book a Room</h1>\n      <form @submit.prevent=\"bookRoom\">\n        <select v-model=\"roomId\" required>\n          <option disabled value=\"\">Select a Room</option>\n          <option v-for=\"room in rooms\" :key=\"room.id\" :value=\"room.id\">{{ room.name }}</option>\n        </select>\n        <input v-model=\"startTime\" type=\"datetime-local\" required />\n        <input v-model=\"endTime\" type=\"datetime-local\" required />\n        <textarea v-model=\"reason\" placeholder=\"Reason for booking\" required></textarea>\n        <button type=\"submit\">Book Room</button>\n      </form>\n      <p v-if=\"message\" class=\"message\">{{ message }}</p>\n  \n      <h2>My Bookings</h2>\n      <ul>\n        <li v-for=\"booking in bookings\" :key=\"booking.id\">\n          {{ booking.room.name }} - {{ booking.startTime }} to {{ booking.endTime }}: {{ booking.reason }}\n        </li>\n      </ul>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        rooms: [],\n        roomId: '',\n        startTime: '',\n        endTime: '',\n        reason: '',\n        message: '',\n        bookings: [],\n      };\n    },\n    async created() {\n      await this.fetchRooms();\n      await this.fetchBookings();\n    },\n    methods: {\n      async fetchRooms() {\n        try {\n          const response = await axios.get('/rooms');\n          this.rooms = response.data;\n        } catch (error) {\n          console.error('Error fetching rooms:', error.message);\n        }\n      },\n      async fetchBookings() {\n        try {\n          const token = localStorage.getItem('authToken');\n          const response = await axios.get('http://localhost:3000/api/bookings', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          this.bookings = response.data;\n        } catch (error) {\n          console.error('Error fetching bookings:', error.message);\n        }\n      },\n      async bookRoom() {\n        try {\n\n            if (!this.roomId || !this.startTime || !this.endTime || !this.reason) {\n                this.message = 'Please fill in all fields before booking.';\n                return;\n            }\n\n          const token = localStorage.getItem('authToken');\n\n          const isAvailable = await this.checkRoomAvailability(this.roomId, this.startTime, this.endTime);\n          if (!isAvailable) {\n            this.message = 'This room is already booked for the selected time.';\n            return;\n          }\n\n          console.log('Sending request with token:', token);\n\n          const response = await axios.post(\n            'http://localhost:3000/api/book',\n            { roomId: this.roomId, startTime: this.startTime, end_time: this.endTime, reason: this.reason },\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n          this.message = `Room booked successfully! Booking ID: ${response.data.booking.id}`;\n          this.fetchBookings(); // Обновляем список брони\n        } catch (error) {\n          console.error('Error booking room:', error.response?.data?.message || error.message);\n          this.message = 'Failed to book the room. Please try again.';\n        }\n      },\n\n      async checkRoomAvailability(roomId, startTime, endTime) {\n            try {\n            const token = localStorage.getItem('authToken');\n            const response = await axios.post(\n                'http://localhost:3000/api/check-availability',\n                { roomId, startTime, endTime },\n                { headers: { Authorization: `Bearer ${token}` } }\n            );\n            return response.data.isAvailable; // Предполагаем, что сервер возвращает { isAvailable: true/false }\n            } catch (error) {\n            console.error('Error checking room availability:', error.message);\n            this.message = 'Failed to check room availability. Please try again.';\n            return false; // Если произошла ошибка, считаем, что комната недоступна\n            }\n        },\n\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .message {\n    color: green;\n    margin-top: 10px;\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}