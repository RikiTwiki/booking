{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      users: [],\n      showModal: false,\n      isEditing: false,\n      formData: {\n        id: null,\n        email: '',\n        password: '',\n        role: 'user'\n      }\n    };\n  },\n  async created() {\n    await this.fetchUsers();\n  },\n  methods: {\n    async fetchUsers() {\n      const token = localStorage.getItem('authToken');\n      const response = await axios.get('/api/users', {\n        // Исправлено на /api/users\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.users = response.data;\n    },\n    openCreateModal() {\n      this.showModal = true;\n      this.isEditing = false;\n      this.formData = {\n        id: null,\n        email: '',\n        password: '',\n        role: 'user'\n      };\n    },\n    openEditModal(user) {\n      this.showModal = true;\n      this.isEditing = true;\n      this.formData = {\n        id: user.id,\n        email: user.email,\n        role: user.role\n      };\n    },\n    async createUser() {\n      const token = localStorage.getItem('authToken');\n      await axios.post('/api/users', this.formData, {\n        // Исправлено на /api/users\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.closeModal();\n      await this.fetchUsers();\n    },\n    async updateUser() {\n      const token = localStorage.getItem('authToken');\n      await axios.put(`/api/users/${this.formData.id}`, this.formData, {\n        // Исправлено на /api/users\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      this.closeModal();\n      await this.fetchUsers();\n    },\n    async deleteUser(id) {\n      const token = localStorage.getItem('authToken');\n      await axios.delete(`/api/users/${id}`, {\n        // Исправлено на /api/users\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      await this.fetchUsers();\n    },\n    closeModal() {\n      this.showModal = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","users","showModal","isEditing","formData","id","email","password","role","created","fetchUsers","methods","token","localStorage","getItem","response","get","headers","Authorization","openCreateModal","openEditModal","user","createUser","post","closeModal","updateUser","put","deleteUser","delete"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/UsersPage.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Manage Users</h1>\n      <button @click=\"openCreateModal\">Create User</button>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Email</th>\n            <th>Role</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"user in users\" :key=\"user.id\">\n            <td>{{ user.id }}</td>\n            <td>{{ user.email }}</td>\n            <td>{{ user.role }}</td>\n            <td>\n              <button @click=\"openEditModal(user)\">Edit</button>\n              <button @click=\"deleteUser(user.id)\">Delete</button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n  \n      <!-- Модальное окно создания и редактирования -->\n      <div v-if=\"showModal\" class=\"modal\">\n        <h2>{{ isEditing ? 'Edit User' : 'Create User' }}</h2>\n        <form @submit.prevent=\"isEditing ? updateUser() : createUser()\">\n          <input v-model=\"formData.email\" placeholder=\"Email\" required />\n          <input v-model=\"formData.password\" placeholder=\"Password\" :required=\"!isEditing\" />\n          <select v-model=\"formData.role\" required>\n            <option value=\"admin\">Admin</option>\n            <option value=\"user\">User</option>\n          </select>\n          <button type=\"submit\">{{ isEditing ? 'Save Changes' : 'Create User' }}</button>\n        </form>\n        <button @click=\"closeModal\">Cancel</button>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        users: [],\n        showModal: false,\n        isEditing: false,\n        formData: { id: null, email: '', password: '', role: 'user' },\n      };\n    },\n    async created() {\n      await this.fetchUsers();\n    },\n    methods: {\n    async fetchUsers() {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.get('/api/users', {  // Исправлено на /api/users\n        headers: { Authorization: `Bearer ${token}` },\n        });\n        this.users = response.data;\n    },\n    openCreateModal() {\n        this.showModal = true;\n        this.isEditing = false;\n        this.formData = { id: null, email: '', password: '', role: 'user' };\n    },\n    openEditModal(user) {\n        this.showModal = true;\n        this.isEditing = true;\n        this.formData = { id: user.id, email: user.email, role: user.role };\n    },\n    async createUser() {\n        const token = localStorage.getItem('authToken');\n        await axios.post('/api/users', this.formData, {  // Исправлено на /api/users\n        headers: { Authorization: `Bearer ${token}` },\n        });\n        this.closeModal();\n        await this.fetchUsers();\n    },\n    async updateUser() {\n        const token = localStorage.getItem('authToken');\n        await axios.put(`/api/users/${this.formData.id}`, this.formData, {  // Исправлено на /api/users\n        headers: { Authorization: `Bearer ${token}` },\n        });\n        this.closeModal();\n        await this.fetchUsers();\n    },\n    async deleteUser(id) {\n        const token = localStorage.getItem('authToken');\n        await axios.delete(`/api/users/${id}`, {  // Исправлено на /api/users\n        headers: { Authorization: `Bearer ${token}` },\n        });\n        await this.fetchUsers();\n    },\n    closeModal() {\n        this.showModal = false;\n    },\n    }\n  };\n  </script>\n  \n  <style scoped>\n  /* Стили для таблицы и модальных окон */\n  </style>  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}