{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"booked-rooms-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"no-rooms\"\n};\nconst _hoisted_3 = {\n  class: \"rooms-list\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 1,\n  class: \"modal\"\n};\nconst _hoisted_6 = {\n  class: \"modal-content\"\n};\nconst _hoisted_7 = {\n  class: \"room-name\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"h1\", {\n    class: \"header\"\n  }, \"Booked Rooms\", -1 /* HOISTED */)), _ctx.rooms.length === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \" No rooms are booked currently. \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Список комнат \"), _createElementVNode(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.rooms, room => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: room.id,\n      onClick: $event => _ctx.showRoomDetails(room),\n      class: \"room-item\"\n    }, _toDisplayString(room.name), 9 /* TEXT, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Модальное окно с деталями бронирования \"), _ctx.selectedRoom ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"h2\", _hoisted_7, _toDisplayString(_ctx.selectedRoom.name), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[1] || (_cache[1] = _createElementVNode(\"strong\", null, \"Author:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedRoom.user_email || 'N/A'), 1 /* TEXT */)]), _createCommentVNode(\" Почта пользователя \"), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Time:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.formatDate(_ctx.selectedRoom.start_time)) + \" to \" + _toDisplayString(_ctx.formatDate(_ctx.selectedRoom.end_time)), 1 /* TEXT */)]), _createCommentVNode(\" Время бронирования \"), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Reason:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.selectedRoom.reason), 1 /* TEXT */)]), _createCommentVNode(\" Причина \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.selectedRoom = null),\n    class: \"close-btn\"\n  }, \"Close\")])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_ctx","rooms","length","_hoisted_2","_createCommentVNode","_hoisted_3","_Fragment","_renderList","room","id","onClick","$event","showRoomDetails","name","_hoisted_4","selectedRoom","_hoisted_5","_hoisted_6","_hoisted_7","_toDisplayString","_createTextVNode","user_email","formatDate","start_time","end_time","reason","_cache"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/AppHome.vue"],"sourcesContent":["<template>\n    <div class=\"booked-rooms-container\">\n      <h1 class=\"header\">Booked Rooms</h1>\n      \n      <div v-if=\"rooms.length === 0\" class=\"no-rooms\">\n        No rooms are booked currently.\n      </div>\n  \n      <!-- Список комнат -->\n      <ul class=\"rooms-list\">\n        <li v-for=\"room in rooms\" :key=\"room.id\" @click=\"showRoomDetails(room)\" class=\"room-item\">\n          {{ room.name }}\n        </li>\n      </ul>\n  \n      <!-- Модальное окно с деталями бронирования -->\n      <div v-if=\"selectedRoom\" class=\"modal\">\n        <div class=\"modal-content\">\n          <h2 class=\"room-name\">{{ selectedRoom.name }}</h2>\n          <p><strong>Author:</strong> {{ selectedRoom.user_email || 'N/A' }}</p> <!-- Почта пользователя -->\n          <p><strong>Time:</strong> {{ formatDate(selectedRoom.start_time) }} to {{ formatDate(selectedRoom.end_time) }}</p> <!-- Время бронирования -->\n          <p><strong>Reason:</strong> {{ selectedRoom.reason }}</p> <!-- Причина -->\n          <button @click=\"selectedRoom = null\" class=\"close-btn\">Close</button>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    data() {\n      return {\n        rooms: [],\n        selectedRoom: null,\n      };\n    },\n    async created() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.get('/bookings', {\n          headers: { Authorization: `Bearer ${token}` }, // Передаем токен\n        });\n        this.rooms = response.data; // Загружаем все бронирования\n\n        console.log(\"Response data:\", response.data);\n\n      } catch (error) {\n        console.error('Error fetching booked rooms:', error);\n        this.$router.push('/login'); // Перенаправляем на логин при ошибке\n      }\n    },\n    methods: {\n        showRoomDetails(room) {\n        console.log(\"Selected room details:\", room);\n        this.selectedRoom = room; // Присваиваем всю информацию выбранной комнаты\n        console.log(\"Start time:\", room.start_time); // Должно показать начальное время бронирования\n        console.log(\"End time:\", room.end_time); // Должно показать конечное время бронирования\n        }\n  \n      formatDate(dateString) {\n        if (!dateString) {\n            console.error(\"Invalid date string: \", dateString);  // Логируем, что dateString не передан\n            return 'No date provided';  // Возвращаем сообщение, когда дата не предоставлена\n        }\n\n        const formattedDateString = dateString.replace(' ', 'T');\n        const date = new Date(formattedDateString);\n        if (isNaN(date.getTime())) {\n            console.error(\"Invalid date format:\", dateString);\n            return 'Invalid Date';\n        }\n\n        return date.toLocaleString();  // Возвращаем локализованное строковое представление даты\n      }\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .booked-rooms-container {\n    padding: 20px;\n  }\n  \n  .header {\n    font-size: 2rem;\n    font-weight: bold;\n    color: #4caf50;\n    margin-bottom: 20px;\n  }\n  \n  .no-rooms {\n    font-size: 1.2rem;\n    color: #555;\n  }\n  \n  .rooms-list {\n    list-style: none;\n    padding: 0;\n  }\n  \n  .room-item {\n    background-color: #f4f4f4;\n    padding: 15px;\n    margin: 10px 0;\n    border-radius: 8px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n  \n  .room-item:hover {\n    background-color: #e0f7fa;\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .modal-content {\n    background: #fff;\n    padding: 30px;\n    border-radius: 10px;\n    width: 300px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n    text-align: center;\n  }\n  \n  .room-name {\n    font-size: 1.5rem;\n    font-weight: bold;\n    color: #4caf50;\n  }\n  \n  button.close-btn {\n    margin-top: 20px;\n    padding: 10px 20px;\n    background-color: #4caf50;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n  \n  button.close-btn:hover {\n    background-color: #45a049;\n  }\n  </style>  "],"mappings":";;EACSA,KAAK,EAAC;AAAwB;;EADvCC,GAAA;EAIqCD,KAAK,EAAC;;;EAKjCA,KAAK,EAAC;AAAY;mBAT5B;;EAAAC,GAAA;EAgB+BD,KAAK,EAAC;;;EACxBA,KAAK,EAAC;AAAe;;EACpBA,KAAK,EAAC;AAAW;;uBAjB3BE,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBJC,mBAAA,CAAoC;IAAhCJ,KAAK,EAAC;EAAQ,GAAC,cAAY,sBAEpBK,IAAA,CAAAC,KAAK,CAACC,MAAM,U,cAAvBL,mBAAA,CAEM,OAFNM,UAEM,EAF0C,kCAEhD,KANNC,mBAAA,gBAQMA,mBAAA,mBAAsB,EACtBL,mBAAA,CAIK,MAJLM,UAIK,I,kBAHHR,mBAAA,CAEKS,SAAA,QAZbC,WAAA,CAU2BP,IAAA,CAAAC,KAAK,EAAbO,IAAI;yBAAfX,mBAAA,CAEK;MAFsBD,GAAG,EAAEY,IAAI,CAACC,EAAE;MAAGC,OAAK,EAAAC,MAAA,IAAEX,IAAA,CAAAY,eAAe,CAACJ,IAAI;MAAGb,KAAK,EAAC;wBACzEa,IAAI,CAACK,IAAI,wBAXtBC,UAAA;oCAeMV,mBAAA,4CAA+C,EACpCJ,IAAA,CAAAe,YAAY,I,cAAvBlB,mBAAA,CAQM,OARNmB,UAQM,GAPJjB,mBAAA,CAMM,OANNkB,UAMM,GALJlB,mBAAA,CAAkD,MAAlDmB,UAAkD,EAAAC,gBAAA,CAAzBnB,IAAA,CAAAe,YAAY,CAACF,IAAI,kBAC1Cd,mBAAA,CAAsE,Y,0BAAnEA,mBAAA,CAAwB,gBAAhB,SAAO,sBAnB5BqB,gBAAA,CAmBqC,GAAC,GAAAD,gBAAA,CAAGnB,IAAA,CAAAe,YAAY,CAACM,UAAU,0B,GAAiBjB,mBAAA,wBAA2B,EAClGL,mBAAA,CAAkH,Y,0BAA/GA,mBAAA,CAAsB,gBAAd,OAAK,sBApB1BqB,gBAAA,CAoBmC,GAAC,GAAAD,gBAAA,CAAGnB,IAAA,CAAAsB,UAAU,CAACtB,IAAA,CAAAe,YAAY,CAACQ,UAAU,KAAI,MAAI,GAAAJ,gBAAA,CAAGnB,IAAA,CAAAsB,UAAU,CAACtB,IAAA,CAAAe,YAAY,CAACS,QAAQ,kB,GAASpB,mBAAA,wBAA2B,EAC9IL,mBAAA,CAAyD,Y,0BAAtDA,mBAAA,CAAwB,gBAAhB,SAAO,sBArB5BqB,gBAAA,CAqBqC,GAAC,GAAAD,gBAAA,CAAGnB,IAAA,CAAAe,YAAY,CAACU,MAAM,iB,GAAQrB,mBAAA,aAAgB,EAC1EL,mBAAA,CAAqE;IAA5DW,OAAK,EAAAgB,MAAA,QAAAA,MAAA,MAAAf,MAAA,IAAEX,IAAA,CAAAe,YAAY;IAASpB,KAAK,EAAC;KAAY,OAAK,E,OAtBtES,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}