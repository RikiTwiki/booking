{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  key: 1,\n  class: \"message\"\n};\nconst _hoisted_2 = {\n  key: 2,\n  class: \"error\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"h1\", null, \"Add New Room\", -1 /* HOISTED */)), $data.isAdmin ? (_openBlock(), _createElementBlock(\"form\", {\n    key: 0,\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.addRoom && $options.addRoom(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.name = $event),\n    type: \"text\",\n    placeholder: \"Room Name\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.name]]), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.description = $event),\n    placeholder: \"Room Description\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.description]]), _cache[3] || (_cache[3] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Add Room\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)) : _createCommentVNode(\"v-if\", true), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_1, _toDisplayString($data.message), 1 /* TEXT */)) : !$data.isAdmin ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Access denied. This page is for administrators only.\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","$data","isAdmin","onSubmit","_cache","_withModifiers","args","$options","addRoom","$event","name","type","placeholder","required","description","_createCommentVNode","message","_hoisted_1","_toDisplayString","_hoisted_2"],"sources":["/home/rikitwiki/Desktop/booking-app/frontend/src/components/AddRoomPage.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Add New Room</h1>\n    <form @submit.prevent=\"addRoom\" v-if=\"isAdmin\">\n      <input v-model=\"name\" type=\"text\" placeholder=\"Room Name\" required />\n      <textarea v-model=\"description\" placeholder=\"Room Description\" required></textarea>\n      <button type=\"submit\">Add Room</button>\n    </form>\n    <p v-if=\"message\" class=\"message\">{{ message }}</p>\n    <p v-else-if=\"!isAdmin\" class=\"error\">Access denied. This page is for administrators only.</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      name: '',\n      description: '',\n      message: '', // Для сообщений об успехе или ошибке\n      isAdmin: false, // Проверка роли пользователя\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem('authToken');\n      if (!token) {\n        this.$router.push('/login'); // Перенаправить на страницу логина, если токена нет\n        return;\n      }\n\n      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Расшифровать JWT токен\n      this.isAdmin = decodedToken.role === 'admin';\n\n      if (!this.isAdmin) {\n        this.$router.push('/'); // Перенаправить, если пользователь не администратор\n      }\n    } catch (error) {\n      console.error('Error decoding token:', error);\n      this.$router.push('/login'); // Перенаправить в случае ошибки\n    }\n  },\n  methods: {\n    async addRoom() {\n      try {\n        const token = localStorage.getItem('authToken');\n        const response = await axios.post(\n          '/add-rooms',\n          { name: this.name, description: this.description },\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n\n        // Используем ответ сервера для подтверждения\n        console.log('Room added successfully:', response.data);\n\n        this.message = `Room \"${response.data.name}\" added successfully!`;\n        this.name = '';\n        this.description = '';\n      } catch (error) {\n        console.error('Error adding room:', error.response?.data?.message || error.message);\n        this.message = 'Failed to add room. Please try again.';\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.message {\n  color: green;\n  margin-top: 10px;\n}\n.error {\n  color: red;\n  margin-top: 10px;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;EAQsBC,KAAK,EAAC;;;EAR5BD,GAAA;EAS4BC,KAAK,EAAC;;;uBARhCC,mBAAA,CASM,c,0BARJC,mBAAA,CAAqB,YAAjB,cAAY,sBACsBC,KAAA,CAAAC,OAAO,I,cAA7CH,mBAAA,CAIO;IAPXF,GAAA;IAGWM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;sBAC5BN,mBAAA,CAAqE;IAJ3E,uBAAAI,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAIsBR,KAAA,CAAAS,IAAI,GAAAD,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC,WAAW;IAACC,QAAQ,EAAR;iDAA1CZ,KAAA,CAAAS,IAAI,E,mBACpBV,mBAAA,CAAmF;IALzF,uBAAAI,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAKyBR,KAAA,CAAAa,WAAW,GAAAL,MAAA;IAAEG,WAAW,EAAC,kBAAkB;IAACC,QAAQ,EAAR;iDAA5CZ,KAAA,CAAAa,WAAW,E,6BAC9Bd,mBAAA,CAAuC;IAA/BW,IAAI,EAAC;EAAQ,GAAC,UAAQ,qB,8BANpCI,mBAAA,gBAQad,KAAA,CAAAe,OAAO,I,cAAhBjB,mBAAA,CAAmD,KAAnDkB,UAAmD,EAAAC,gBAAA,CAAdjB,KAAA,CAAAe,OAAO,oB,CAC7Bf,KAAA,CAAAC,OAAO,I,cAAtBH,mBAAA,CAA8F,KAA9FoB,UAA8F,EAAxD,sDAAoD,KAT9FJ,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}